<context>
# Overview  
构建一个基于Node.js的MCP（Model Context Protocol）服务器，专门用于图片下载功能。该服务器允许用户提供单个或批量图片URL，并将图片下载到本地指定路径，同时支持多种自定义选项如保存格式、压缩设置等。这个工具解决了批量图片下载和处理的需求，为开发者和内容管理者提供便利。

# Core Features  
1. **图片URL处理**
   - 支持单个图片URL下载
   - 支持批量图片URL下载
   - URL验证和格式检查

2. **下载管理**
   - 可配置的下载路径
   - 并发下载控制
   - 下载进度跟踪
   - 错误处理和重试机制

3. **图片处理**
   - 支持多种保存格式（jpg, png, webp等）
   - 可选的图片压缩功能
   - 自定义最大宽度和高度限制
   - 保持原始图片质量选项

4. **MCP协议集成**
   - 实现标准MCP服务器接口
   - 提供工具定义和参数验证
   - 支持异步操作和状态报告

# User Experience  
**用户角色**: 开发者、内容管理者、数据收集人员

**主要用户流程**:
1. 启动MCP服务器
2. 通过MCP客户端调用图片下载工具
3. 提供图片URL（单个或批量）
4. 配置下载选项（路径、格式、压缩等）
5. 监控下载进度
6. 获取下载结果报告

**UI/UX考虑**:
- 清晰的错误消息和状态反馈
- 进度指示器
- 详细的配置选项说明
</context>

<PRD>
# Technical Architecture  
**系统组件**:
- MCP服务器核心模块
- 图片下载管理器
- 图片处理引擎（使用Sharp库）
- URL验证器
- 文件系统管理器

**数据模型**:
- DownloadTask: 包含URL、目标路径、配置选项
- DownloadResult: 包含状态、文件路径、错误信息
- ProcessingOptions: 格式、压缩、尺寸限制

**APIs和集成**:
- MCP工具接口：download_image, download_images_batch
- HTTP客户端用于图片下载
- 文件系统API用于保存

**基础设施要求**:
- Node.js 18+
- npm包：@modelcontextprotocol/sdk, sharp, axios
- 文件系统写入权限

# Development Roadmap  
**第一阶段 - MVP核心功能**:
- 基础MCP服务器框架
- 单个图片URL下载功能
- 基本的文件保存功能
- 简单的错误处理

**第二阶段 - 批量处理**:
- 批量URL处理
- 并发下载管理
- 进度跟踪
- 详细的状态报告

**第三阶段 - 图片处理**:
- 图片格式转换
- 压缩功能
- 尺寸调整
- 质量控制选项

**第四阶段 - 高级功能**:
- 下载队列管理
- 重试机制
- 缓存机制
- 配置文件支持

# Logical Dependency Chain
**基础层**（必须首先构建）:
1. MCP服务器基础框架
2. 基本的HTTP下载功能
3. 文件系统操作

**核心功能层**（在基础层之上）:
4. 单个图片下载工具
5. URL验证和错误处理
6. 基本的MCP工具接口

**扩展功能层**（核心功能完成后）:
7. 批量下载功能
8. 图片处理和转换
9. 高级配置选项

**优化层**（最后实现）:
10. 性能优化和并发控制
11. 详细的进度报告
12. 高级错误处理和重试

# Risks and Mitigations  
**技术挑战**:
- 大文件下载可能导致内存问题 → 使用流式下载
- 并发下载可能超出系统限制 → 实现队列和限流
- 图片处理可能消耗大量CPU → 提供可选的处理功能

**MVP范围**:
- 专注于核心下载功能，图片处理作为可选功能
- 先实现单个下载，再扩展到批量
- 优先保证功能正确性，再优化性能

**资源约束**:
- 依赖第三方库的稳定性 → 选择成熟的库如Sharp
- 网络连接问题 → 实现重试和超时机制

# Appendix  
**技术规范**:
- MCP协议版本：最新稳定版
- 支持的图片格式：JPEG, PNG, WebP, GIF
- 最大文件大小：100MB（可配置）
- 并发下载数：5个（可配置）

**研究发现**:
- Sharp库是Node.js中最高效的图片处理库
- axios提供了良好的HTTP下载支持
- MCP SDK提供了标准的服务器实现模板
</PRD>